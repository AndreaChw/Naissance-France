############################################################## INTERPOLAITON, LAG DE TEMPS, LINEARISATION DES VARIABLES

library(readxl)
library(dplyr)
library(tidyr)
library(writexl)

# Étape 1 : Charger les données et renommer les colonnes
data <- read_excel('//Users/mehdifehri/Desktop/R/Données/Data R Ajustée.xlsx') %>%
  rename_with(~ gsub("-", "_", .), everything())  # Renommer les colonnes avec des caractères spéciaux

# Identifier les colonnes numériques (exclure Annee mais inclure fec pour interpolation)
numeric_cols <- setdiff(colnames(data), "Annee")

# Étape 2 : Interpolation trimestrielle (inclut fec)
data_interpolated <- data %>%
  complete(Annee = seq(min(Annee), max(Annee), by = 0.25)) %>%
  mutate(across(all_of(numeric_cols), ~ approx(Annee[!is.na(.)], .[!is.na(.)], xout = Annee)$y))

# Étape 3 : Décalage temporel des variables explicatives
data_lagged <- data_interpolated %>%
  arrange(Annee) %>%
  mutate(across(setdiff(numeric_cols, "fec"), ~ lag(., n = 4), .names = "lag_{col}"))  # Exclut fec

# Nettoyer les NA générés par le lagging
data_clean <- data_lagged %>%
  drop_na(starts_with("lag_"))

# Étape 4 : Identifier les variables explicatives laggées
variables_explicatives_lag <- colnames(data_clean)[grepl("lag_", colnames(data_clean))]

# Étape 5 : Appliquer les transformations et calculer les \( R^2 \) ajustés
results <- data.frame(
  Variable = character(),
  Transformation = character(),
  Adjusted_R2 = numeric(),
  Improvement = numeric(),
  stringsAsFactors = FALSE
)

# Définir les transformations possibles
transformations <- list(
  "None" = function(x) x,
  "Log" = function(x) ifelse(x > 0, log(x + 1), NA),
  "Sqrt" = function(x) ifelse(x >= 0, sqrt(x), NA),
  "Quad" = function(x) x^2,
  "Inverse" = function(x) ifelse(x != 0, 1 / (x + 1), NA)
)

# Fonction pour calculer le R² ajusté
get_adj_r2 <- function(formula, data) {
  model <- lm(formula, data = data)
  return(summary(model)$adj.r.squared)
}

# Tester chaque transformation pour chaque variable explicative laggée
for (var in variables_explicatives_lag) {
  base_r2 <- get_adj_r2(as.formula(paste("fec ~", var)), data_clean)
  
  for (trans_name in names(transformations)) {
    trans_func <- transformations[[trans_name]]
    transformed_var <- trans_func(data_clean[[var]])
    
    # Vérifier les NA générés
    if (anyNA(transformed_var)) {
      adj_r2 <- NA
    } else {
      data_clean$temp_var <- transformed_var
      adj_r2 <- get_adj_r2(as.formula("fec ~ temp_var"), data_clean)
    }
    
    # Ajouter les résultats au tableau
    results <- rbind(
      results,
      data.frame(
        Variable = var,
        Transformation = trans_name,
        Adjusted_R2 = adj_r2,
        Improvement = adj_r2 - base_r2,
        stringsAsFactors = FALSE
      )
    )
  }
}

# Étape 6 : Identifier la meilleure transformation pour chaque variable
best_transformations <- results %>%
  group_by(Variable) %>%
  filter(Adjusted_R2 == max(Adjusted_R2, na.rm = TRUE)) %>%
  mutate(Keep_Transformation = if_else(Improvement > 0.05 & Transformation != "None", "Yes", "No")) %>%
  arrange(desc(Improvement))

# Étape 7 : Appliquer les transformations retenues et renommer uniquement les variables transformées
final_dataframe <- data_clean

for (i in 1:nrow(best_transformations)) {
  var <- best_transformations$Variable[i]
  trans <- best_transformations$Transformation[i]
  
  if (trans != "None" && best_transformations$Keep_Transformation[i] == "Yes") {
    # Appliquer la transformation
    final_dataframe[[var]] <- transformations[[trans]](data_clean[[var]])
    # Renommer la colonne avec la transformation appliquée
    new_name <- paste0(var, "_", tolower(trans))
    colnames(final_dataframe)[colnames(final_dataframe) == var] <- new_name
  }
}

# Étape 8 : Sauvegarder les résultats
write_xlsx(best_transformations, "//Users/mehdifehri/Desktop/R/Données/Best_Transformations.xlsx")
write_xlsx(final_dataframe, "//Users/mehdifehri/Desktop/R/Données/Final_Data_Transformed.xlsx")

# Étape 9 : Préparer le DataFrame final avec les variables laggées et la variable dépendante
final_dataframe_lagged <- final_dataframe %>%
  select(Annee, fec, starts_with("lag_"))

# Sauvegarde du DataFrame final
write_xlsx(final_dataframe_lagged, "//Users/mehdifehri/Desktop/R/Données/Final_Data_Lagged.xlsx")
